// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class MedicalRecordStored extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MedicalRecordStored entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MedicalRecordStored must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MedicalRecordStored", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): MedicalRecordStored | null {
    return changetype<MedicalRecordStored | null>(
      store.get_in_block("MedicalRecordStored", id.toHexString())
    );
  }

  static load(id: Bytes): MedicalRecordStored | null {
    return changetype<MedicalRecordStored | null>(
      store.get("MedicalRecordStored", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Contract_id(): BigInt {
    let value = this.get("Contract_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Contract_id(value: BigInt) {
    this.set("Contract_id", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class PatientInfoStored extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PatientInfoStored entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PatientInfoStored must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PatientInfoStored", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PatientInfoStored | null {
    return changetype<PatientInfoStored | null>(
      store.get_in_block("PatientInfoStored", id.toHexString())
    );
  }

  static load(id: Bytes): PatientInfoStored | null {
    return changetype<PatientInfoStored | null>(
      store.get("PatientInfoStored", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Contract_id(): BigInt {
    let value = this.get("Contract_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Contract_id(value: BigInt) {
    this.set("Contract_id", Value.fromBigInt(value));
  }

  get patientInfo_Name(): string {
    let value = this.get("patientInfo_Name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set patientInfo_Name(value: string) {
    this.set("patientInfo_Name", Value.fromString(value));
  }

  get patientInfo_DateOfBirth(): string {
    let value = this.get("patientInfo_DateOfBirth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set patientInfo_DateOfBirth(value: string) {
    this.set("patientInfo_DateOfBirth", Value.fromString(value));
  }

  get patientInfo_BloodType(): string {
    let value = this.get("patientInfo_BloodType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set patientInfo_BloodType(value: string) {
    this.set("patientInfo_BloodType", Value.fromString(value));
  }

  get patientInfo_Allergies(): Array<string> {
    let value = this.get("patientInfo_Allergies");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set patientInfo_Allergies(value: Array<string>) {
    this.set("patientInfo_Allergies", Value.fromStringArray(value));
  }

  get patientInfo_ChronicConditions(): Array<string> {
    let value = this.get("patientInfo_ChronicConditions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set patientInfo_ChronicConditions(value: Array<string>) {
    this.set("patientInfo_ChronicConditions", Value.fromStringArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
