// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MedicalRecordStored extends ethereum.Event {
  get params(): MedicalRecordStored__Params {
    return new MedicalRecordStored__Params(this);
  }
}

export class MedicalRecordStored__Params {
  _event: MedicalRecordStored;

  constructor(event: MedicalRecordStored) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get medicalRecords(): Array<MedicalRecordStoredMedicalRecordsStruct> {
    return this._event.parameters[1].value.toTupleArray<
      MedicalRecordStoredMedicalRecordsStruct
    >();
  }
}

export class MedicalRecordStoredMedicalRecordsStruct extends ethereum.Tuple {
  get Condition(): string {
    return this[0].toString();
  }

  get Date(): string {
    return this[1].toString();
  }

  get Location(): string {
    return this[2].toString();
  }
}

export class PatientInfoStored extends ethereum.Event {
  get params(): PatientInfoStored__Params {
    return new PatientInfoStored__Params(this);
  }
}

export class PatientInfoStored__Params {
  _event: PatientInfoStored;

  constructor(event: PatientInfoStored) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get patientInfo(): PatientInfoStoredPatientInfoStruct {
    return changetype<PatientInfoStoredPatientInfoStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class PatientInfoStoredPatientInfoStruct extends ethereum.Tuple {
  get Name(): string {
    return this[0].toString();
  }

  get DateOfBirth(): string {
    return this[1].toString();
  }

  get BloodType(): string {
    return this[2].toString();
  }

  get Allergies(): Array<string> {
    return this[3].toStringArray();
  }

  get ChronicConditions(): Array<string> {
    return this[4].toStringArray();
  }
}

export class Contract__getMedicalHistoryResultValue0Struct extends ethereum.Tuple {
  get Condition(): string {
    return this[0].toString();
  }

  get Date(): string {
    return this[1].toString();
  }

  get Location(): string {
    return this[2].toString();
  }
}

export class Contract__getPatientInfoResultValue0Struct extends ethereum.Tuple {
  get Name(): string {
    return this[0].toString();
  }

  get DateOfBirth(): string {
    return this[1].toString();
  }

  get BloodType(): string {
    return this[2].toString();
  }

  get Allergies(): Array<string> {
    return this[3].toStringArray();
  }

  get ChronicConditions(): Array<string> {
    return this[4].toStringArray();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  getMedicalHistory(
    id: BigInt
  ): Array<Contract__getMedicalHistoryResultValue0Struct> {
    let result = super.call(
      "getMedicalHistory",
      "getMedicalHistory(uint256):((string,string,string)[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toTupleArray<
      Contract__getMedicalHistoryResultValue0Struct
    >();
  }

  try_getMedicalHistory(
    id: BigInt
  ): ethereum.CallResult<Array<Contract__getMedicalHistoryResultValue0Struct>> {
    let result = super.tryCall(
      "getMedicalHistory",
      "getMedicalHistory(uint256):((string,string,string)[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__getMedicalHistoryResultValue0Struct>()
    );
  }

  getPatientInfo(id: BigInt): Contract__getPatientInfoResultValue0Struct {
    let result = super.call(
      "getPatientInfo",
      "getPatientInfo(uint256):((string,string,string,string[],string[]))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return changetype<Contract__getPatientInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPatientInfo(
    id: BigInt
  ): ethereum.CallResult<Contract__getPatientInfoResultValue0Struct> {
    let result = super.tryCall(
      "getPatientInfo",
      "getPatientInfo(uint256):((string,string,string,string[],string[]))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getPatientInfoResultValue0Struct>(value[0].toTuple())
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class StoreMedicalHistoryCall extends ethereum.Call {
  get inputs(): StoreMedicalHistoryCall__Inputs {
    return new StoreMedicalHistoryCall__Inputs(this);
  }

  get outputs(): StoreMedicalHistoryCall__Outputs {
    return new StoreMedicalHistoryCall__Outputs(this);
  }
}

export class StoreMedicalHistoryCall__Inputs {
  _call: StoreMedicalHistoryCall;

  constructor(call: StoreMedicalHistoryCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get medicalRecords(): Array<StoreMedicalHistoryCallMedicalRecordsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      StoreMedicalHistoryCallMedicalRecordsStruct
    >();
  }
}

export class StoreMedicalHistoryCall__Outputs {
  _call: StoreMedicalHistoryCall;

  constructor(call: StoreMedicalHistoryCall) {
    this._call = call;
  }
}

export class StoreMedicalHistoryCallMedicalRecordsStruct extends ethereum.Tuple {
  get Condition(): string {
    return this[0].toString();
  }

  get Date(): string {
    return this[1].toString();
  }

  get Location(): string {
    return this[2].toString();
  }
}

export class StorePatientInfoCall extends ethereum.Call {
  get inputs(): StorePatientInfoCall__Inputs {
    return new StorePatientInfoCall__Inputs(this);
  }

  get outputs(): StorePatientInfoCall__Outputs {
    return new StorePatientInfoCall__Outputs(this);
  }
}

export class StorePatientInfoCall__Inputs {
  _call: StorePatientInfoCall;

  constructor(call: StorePatientInfoCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get patientInfoData(): StorePatientInfoCallPatientInfoDataStruct {
    return changetype<StorePatientInfoCallPatientInfoDataStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class StorePatientInfoCall__Outputs {
  _call: StorePatientInfoCall;

  constructor(call: StorePatientInfoCall) {
    this._call = call;
  }
}

export class StorePatientInfoCallPatientInfoDataStruct extends ethereum.Tuple {
  get Name(): string {
    return this[0].toString();
  }

  get DateOfBirth(): string {
    return this[1].toString();
  }

  get BloodType(): string {
    return this[2].toString();
  }

  get Allergies(): Array<string> {
    return this[3].toStringArray();
  }

  get ChronicConditions(): Array<string> {
    return this[4].toStringArray();
  }
}
